# hello! Lab Report 2: Servers and bugs (ew bugs! XP)
## Part 1 :p
The code below is the code for our String Server program:

'import java.io.IOException;
import java.net.URI;


class Handler implements URLHandler {
   // The one bit of state on the server: a number that will be manipulated by
   // various requests.
   String word=" ";


   public String handleRequest(URI url) {
       if (url.getPath().equals("/")) {
           return word;
       }
       else {
           System.out.println("Path: " + url.getPath());
           if (url.getPath().contains("/add-message")) {
               String[] parameters = url.getQuery().split("=");
               if (parameters[0].equals("s")) {
                   word += (parameters[1])+"\n";
                   return String.format("%s was successfully added!", parameters[1]);
               }
           }
           else if(url.getPath().contains("/search")){
               String[] parameters=url.getQuery().split("=");
               String wordFound= new String();
               if (parameters[0].equals("s")){
                   String[] find= word.split("\n");
                   for (int i=0; i<find.length;i++){
                       if (find[i].contains(parameters[1])){
                           wordFound+=find[i]+"\n";
                       }
                   }return wordFound;
               }
           }return "404 Not Found!";
       }  
   }
}


class StringServer {
   public static void main(String[] args) throws IOException {
       if(args.length == 0){
           System.out.println("Missing port number! Try any number between 1024 to 49151");
           return;
       }


       int port = Integer.parseInt(args[0]);


       Server.start(port, new Handler());
   }
}'
First we must compile the code so this program can even run/work at all as well as the code for Server.java. We compile the code using 'javac StringServer.java Server.java'.
and voila! we have compiled the code! Now we can run it using java StringServer (along with the parameters it requires such as the port number of course).
** insert image here 
Now once we insert the port number we can create our own server! (basically a very empty website lol). And the creation of this server can be attributed to the code below:
**insert image
Now once we start the server we can open it and see that it is completely empty D:! This is because of the following code which establishes the empty display:
** insert image
This is the server that was started! 
**insert image 
Now, let us add some strings into our empty list! To do this we will write 'add-message?s=' into our URL.
**insert image
This is the result of the following code (which adds the string after 's=' into the string variable 'word':
**insert image
This is now our NEW website/server (it contains a silly word now lol)!
**image
Now lets concatonate another word! And this is the result:
**insert image
**insert image
